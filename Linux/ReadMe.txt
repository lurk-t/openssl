
CS:
Crypto Service (CS)  is the main part of LURK. CS is the library that would provide all the secrets and signatures.

CS test APIs: 
There is a test folder in which we are calling the CS APIs with some dummy handshakes. (This is not the full handshake and needs to be a valid handshake for measurements).

How to build CS:
prerequisites:
-Intel SGX SDK.
-Intel SGX SSL.

SGX SDK Settings:
Open the "makefile" in the SampleEnclave folder. Search for "SGX SDK Settings" make sure they are pointing to the right SGX SDK folder.

SGX SSL Settings :
Open the "makefile" in the SampleEnclave folder. Search for "SGX SSL Settings" make sure they are pointing to the right SGX SSL  folder.

Note: CS supports the same flags as SDK SampleEnclave for Hardware or simulation mode or Debug, Release, PreRelease mode.



-------------------------------------------------------------------------------------------------------------------------------------------------------

OpenSSL:
You need to have both normal versions of OpenSSL and LURK OpenSSL.
Normal OpenSSL:
Download OpenSSL from their git. (my version is 1.1.1g). The instruction on how to build each configuration is on the "modified OpenSSL" folder in the "How_to_notes.txt". Of course "--prefix and --openssldir" are for you to set. Build all 4 versions of OpenSSL.
LURK OpenSSL:
I have integrated the LURK CS APIs so that the OpenSSL handshake would use LURK instead of a normal thread. The instruction on how to build each configuration is on the "modified OpenSSL" folder in the "How_to_notes.txt". Of course "--prefix and --openssldir" are for you to set. Just run the ./config command to generate the makefile. To install the LURK OpenSSL you must replace on the OpenSSL source with the files in the "Linux/modified OpenSSL/changed_files". To install OpenSSL Lurk the makefile of OpenSSL should be modified in a way that LURK CS APIs are compiled and linked with OpenSSL. You can find my makefiles for each configuration on my_make_files folder. Open the appropriate one and search for LURK.  
ADD ALL LURK Flags to the makefile that was generated by you OpenSSL. Note where ever the flags are added you also need to add them to the generated files. 
change the following flags:
LURK_INCLUDE = must point to include a folder of CS.
SGXSSL_UNTRUSTED_LIB_PATH = OpenSSL SGX path on your computer.
SGX_SDK = SGX SDK path on your computer.
LURK_LIB_path = must point to main a folder of CS.

If all the steps are you can save. Now run "make" to install the OpenSSL LURK.



-------------------------------------------------------------------------------------------------------------------------------------------------------



TLS server:
TLS server is a very basic server that is based on OpenSSL APIs. This project supports all configuration of the TLS server (e.g using LURK-OpenSSL or normal OpenSSL, static vs dynamic linking for the library, Debug vs Release Mode).
It would start the server on the localhost on port 8400. 

How to build:

prerequisites:
LURK CS. 
OpenSSL normal version.
OpenSSL LURK version.
SGX-SSL.

open "makefile" and change the paths to the right ones on your system.
Note that "Modified_OpenSSL" is the path that is using the OpenSSL LURK version on my computer (therefore is different in your computer).

Search for "SGX SDK and SGX SSL PATHs" and set them to the right point on your computer.

Make the appropriate server that you need they can be " LURK_Server_Debug,  LURK_Server_Release, Normal_Server_Debug, Normal_Server_Release, Normal_Server_Dynamic_Release, LURK_Server_Dynamic_Debug, Normal_Server_Dynamic_Debug or LURK_Server_Dynamic_Release"

Possible errors:
connect using https, not HTTP. 
enclave files are not on the TLS server directory. (enclave.so and enclave-sign.so)
makefile is not pointing to the right directory.
LD_LIBRARY_PATH must be set to the TLS server folder if you are using the dynamic model. and also all the *.so files must be on the same folder.



Versions used in my Linux:
OPENSSL version: 1.1.1g
OPENSSL SGX version: 1.1.1g
SGX_SDK version: 2.10.100.2

